// Mocks generated by Mockito 5.4.2 from annotations
// in getx_testing/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i12;

import 'package:dartz/dartz.dart' as _i2;
import 'package:get/get.dart' as _i3;
import 'package:get/get_state_manager/src/simple/list_notifier.dart' as _i11;
import 'package:getx_testing/abstract_repos/get_quote_data.dart' as _i4;
import 'package:getx_testing/error/failure.dart' as _i6;
import 'package:getx_testing/RANDOM/quote/models/quote_model.dart' as _i7;
import 'package:getx_testing/RANDOM/riddle/controller/riddle_controller.dart'
    as _i9;
import 'package:getx_testing/RANDOM/riddle/model/riddle_model.dart' as _i10;
import 'package:getx_testing/repo_impl/get_quote.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRxBool_1 extends _i1.SmartFake implements _i3.RxBool {
  _FakeRxBool_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRx_2<T> extends _i1.SmartFake implements _i3.Rx<T> {
  _FakeRx_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInternalFinalCallback_3<T> extends _i1.SmartFake
    implements _i3.InternalFinalCallback<T> {
  _FakeInternalFinalCallback_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetQuoteData].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetQuoteData extends _i1.Mock implements _i4.GetQuoteData {
  MockGetQuoteData() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.QuoteModel>> getDataFromApi() =>
      (super.noSuchMethod(
        Invocation.method(
          #getDataFromApi,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i7.QuoteModel>>.value(
            _FakeEither_0<_i6.Failure, _i7.QuoteModel>(
          this,
          Invocation.method(
            #getDataFromApi,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.QuoteModel>>);
}

/// A class which mocks [GetQuoteImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetQuoteImpl extends _i1.Mock implements _i8.GetQuoteImpl {
  MockGetQuoteImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.QuoteModel>> getDataFromApi() =>
      (super.noSuchMethod(
        Invocation.method(
          #getDataFromApi,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i7.QuoteModel>>.value(
            _FakeEither_0<_i6.Failure, _i7.QuoteModel>(
          this,
          Invocation.method(
            #getDataFromApi,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.QuoteModel>>);
}

/// A class which mocks [RiddleController].
///
/// See the documentation for Mockito's code generation for more information.
class MockRiddleController extends _i1.Mock implements _i9.RiddleController {
  MockRiddleController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.RxBool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: _FakeRxBool_1(
          this,
          Invocation.getter(#isLoading),
        ),
      ) as _i3.RxBool);
  @override
  _i3.RxBool get isShowed => (super.noSuchMethod(
        Invocation.getter(#isShowed),
        returnValue: _FakeRxBool_1(
          this,
          Invocation.getter(#isShowed),
        ),
      ) as _i3.RxBool);
  @override
  _i3.Rx<_i10.RiddleModel?> get riddle => (super.noSuchMethod(
        Invocation.getter(#riddle),
        returnValue: _FakeRx_2<_i10.RiddleModel?>(
          this,
          Invocation.getter(#riddle),
        ),
      ) as _i3.Rx<_i10.RiddleModel?>);
  @override
  _i3.InternalFinalCallback<void> get onStart => (super.noSuchMethod(
        Invocation.getter(#onStart),
        returnValue: _FakeInternalFinalCallback_3<void>(
          this,
          Invocation.getter(#onStart),
        ),
      ) as _i3.InternalFinalCallback<void>);
  @override
  _i3.InternalFinalCallback<void> get onDelete => (super.noSuchMethod(
        Invocation.getter(#onDelete),
        returnValue: _FakeInternalFinalCallback_3<void>(
          this,
          Invocation.getter(#onDelete),
        ),
      ) as _i3.InternalFinalCallback<void>);
  @override
  bool get initialized => (super.noSuchMethod(
        Invocation.getter(#initialized),
        returnValue: false,
      ) as bool);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  int get listeners => (super.noSuchMethod(
        Invocation.getter(#listeners),
        returnValue: 0,
      ) as int);
  @override
  _i5.Future<void> getRiddle() => (super.noSuchMethod(
        Invocation.method(
          #getRiddle,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  bool showOnTap() => (super.noSuchMethod(
        Invocation.method(
          #showOnTap,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i5.Future<void> onInit() => (super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void update([
    List<Object>? ids,
    bool? condition = true,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #update,
          [
            ids,
            condition,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onReady() => super.noSuchMethod(
        Invocation.method(
          #onReady,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onClose() => super.noSuchMethod(
        Invocation.method(
          #onClose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void $configureLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #$configureLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i11.Disposer addListener(_i11.GetStateUpdate? listener) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValue: () {},
      ) as _i11.Disposer);
  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void refresh() => super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void refreshGroup(Object? id) => super.noSuchMethod(
        Invocation.method(
          #refreshGroup,
          [id],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyChildrens() => super.noSuchMethod(
        Invocation.method(
          #notifyChildrens,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListenerId(
    Object? id,
    _i12.VoidCallback? listener,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #removeListenerId,
          [
            id,
            listener,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i11.Disposer addListenerId(
    Object? key,
    _i11.GetStateUpdate? listener,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListenerId,
          [
            key,
            listener,
          ],
        ),
        returnValue: () {},
      ) as _i11.Disposer);
  @override
  void disposeId(Object? id) => super.noSuchMethod(
        Invocation.method(
          #disposeId,
          [id],
        ),
        returnValueForMissingStub: null,
      );
}
